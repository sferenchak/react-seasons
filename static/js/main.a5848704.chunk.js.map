{"version":3,"sources":["SeasonDisplay.js","Spinner.js","index.js","useLocation.js"],"names":["seasonConfig","summer","text","iconName","winter","SeasonDisplay","props","lat","month","season","Date","getMonth","_seasonConfig$season","react_default","a","createElement","className","concat","Spinner","class","message","defaultProps","ReactDOM","render","content","_useLocation","_useState","useState","_useState2","Object","slicedToArray","setLat","_useState3","_useState4","errorMessage","setErrorMessage","useEffect","window","navigator","geolocation","getCurrentPosition","position","coords","latitude","err","useLocation","_useLocation2","src_SeasonDisplay_0","src_Spinner","document","querySelector"],"mappings":"gKAGMA,SAAe,CACpBC,OAAQ,CACPC,KAAM,uBACNC,SAAU,OAEXC,OAAQ,CACPF,KAAM,qBACNC,SAAU,eAyBGE,EAbO,SAAAC,GACrB,IATkBC,EAAKC,EASjBC,GATYF,EASOD,EAAMC,KATRC,GASa,IAAIE,MAAOC,YARnC,GAAKH,EAAQ,EACjBD,EAAM,EAAI,SAAW,SAErBA,EAAM,EAAI,SAAW,UAICK,EAEHZ,EAAaS,GAAhCP,EAFsBU,EAEtBV,KAAMC,EAFgBS,EAEhBT,SAEd,OACCU,EAAAC,EAAAC,cAAA,OAAKC,UAAS,kBAAAC,OAAoBR,IACjCI,EAAAC,EAAAC,cAAA,KAAGC,UAAS,aAAAC,OAAed,EAAf,mBACZU,EAAAC,EAAAC,cAAA,UAAKb,GACLW,EAAAC,EAAAC,cAAA,KAAGC,UAAS,cAAAC,OAAgBd,EAAhB,qBC5BTe,EAAU,SAAAZ,GACf,OACCO,EAAAC,EAAAC,cAAA,OAAKI,MAAM,oBACVN,EAAAC,EAAAC,cAAA,OAAKI,MAAM,gCAAgCb,EAAMc,WAKpDF,EAAQG,aAAe,CACtBD,QAAS,cAGKF,QCOfI,IAASC,OAAOV,EAAAC,EAAAC,cAfJ,WAAM,IAGbS,EAHaC,ECJH,WAAM,IAAAC,EACEC,mBAAS,MADXC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACbnB,EADaqB,EAAA,GACRG,EADQH,EAAA,GAAAI,EAEoBL,mBAAS,IAF7BM,EAAAJ,OAAAC,EAAA,EAAAD,CAAAG,EAAA,GAEbE,EAFaD,EAAA,GAECE,EAFDF,EAAA,GAWpB,OAPAG,oBAAU,WACTC,OAAOC,UAAUC,YAAYC,mBAC5B,SAAAC,GAAQ,OAAIV,EAAOU,EAASC,OAAOC,WACnC,SAAAC,GAAG,OAAIT,EAAgBS,EAAIxB,YAE1B,IAEI,CAACb,EAAK2B,GDNeW,GADXC,EAAAjB,OAAAC,EAAA,EAAAD,CAAAJ,EAAA,GACVlB,EADUuC,EAAA,GACLZ,EADKY,EAAA,GAYjB,OAPCtB,EADGU,EACOrB,EAAAC,EAAAC,cAAA,qBAAamB,GACb3B,EACAM,EAAAC,EAAAC,cAACgC,EAAD,CAAexC,IAAKA,IAEpBM,EAAAC,EAAAC,cAACiC,EAAD,CAAS5B,QAAQ,mCAGrBP,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cAAcQ,IAGrB,MAASyB,SAASC,cAAc","file":"static/js/main.a5848704.chunk.js","sourcesContent":["import React from 'react';\r\nimport './SeasonDisplay.css';\r\n\r\nconst seasonConfig = {\r\n\tsummer: {\r\n\t\ttext: \"Let's hit the beach!\",\r\n\t\ticonName: 'sun'\r\n\t},\r\n\twinter: {\r\n\t\ttext: \"Burr... It's cold!\",\r\n\t\ticonName: 'snowflake'\r\n\t}\r\n};\r\n\r\nconst getSeason = (lat, month) => {\r\n\tif (month > 2 && month < 9) {\r\n\t\treturn lat > 0 ? 'summer' : 'winter';\r\n\t} else {\r\n\t\treturn lat > 0 ? 'winter' : 'summer';\r\n\t}\r\n};\r\n\r\nconst SeasonDisplay = props => {\r\n\tconst season = getSeason(props.lat, new Date().getMonth());\r\n\tconst { text, iconName } = seasonConfig[season];\r\n\r\n\treturn (\r\n\t\t<div className={`season-display ${season}`}>\r\n\t\t\t<i className={`icon-left ${iconName} icon massive`} />\r\n\t\t\t<h1>{text}</h1>\r\n\t\t\t<i className={`icon-right ${iconName} icon massive`} />\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default SeasonDisplay;\r\n","import React from 'react';\r\n\r\nconst Spinner = props => {\r\n\treturn (\r\n\t\t<div class='ui active dimmer'>\r\n\t\t\t<div class='ui indeterminate text loader'>{props.message}</div>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nSpinner.defaultProps = {\r\n\tmessage: 'Loading...'\r\n};\r\n\r\nexport default Spinner;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport SeasonDisplay from './SeasonDisplay';\r\nimport Spinner from './Spinner';\r\nimport useLocation from './useLocation';\r\n\r\nconst App = () => {\r\n\tconst [lat, errorMessage] = useLocation();\r\n\r\n\tlet content;\r\n\tif (errorMessage) {\r\n\t\tcontent = <div>Error: {errorMessage}</div>;\r\n\t} else if (lat) {\r\n\t\tcontent = <SeasonDisplay lat={lat} />;\r\n\t} else {\r\n\t\tcontent = <Spinner message='Please accept location request' />;\r\n\t}\r\n\r\n\treturn <div className='border red'>{content}</div>;\r\n};\r\n\r\nReactDOM.render(<App />, document.querySelector('#root'));\r\n","import { useState, useEffect } from 'react';\r\n\r\nexport default () => {\r\n\tconst [lat, setLat] = useState(null);\r\n\tconst [errorMessage, setErrorMessage] = useState('');\r\n\r\n\tuseEffect(() => {\r\n\t\twindow.navigator.geolocation.getCurrentPosition(\r\n\t\t\tposition => setLat(position.coords.latitude),\r\n\t\t\terr => setErrorMessage(err.message)\r\n\t\t);\r\n\t}, []);\r\n\r\n\treturn [lat, errorMessage];\r\n};\r\n"],"sourceRoot":""}